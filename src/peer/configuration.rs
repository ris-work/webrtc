use crate::ice::ice_server::ICEServer;
use crate::policy::bundle_policy::BundlePolicy;
use crate::policy::ice_transport_policy::ICETransportPolicy;
use crate::policy::rtcp_mux_policy::RTCPMuxPolicy;
use crate::policy::sdp_policy::SdpPolicy;

use dtls::crypto::Certificate;

/// A Configuration defines how peer-to-peer communication via PeerConnection
/// is established or re-established.
/// Configurations may be set up once and reused across multiple connections.
/// Configurations are treated as readonly. As long as they are unmodified,
/// they are safe for concurrent use.
pub struct Configuration {
    /// iceservers defines a slice describing servers available to be used by
    /// ICE, such as STUN and TURN servers.
    ice_servers: Vec<ICEServer>, // `json:"iceServers,omitempty"`

    /// icetransport_policy indicates which candidates the ICEAgent is allowed
    /// to use.
    ice_transport_policy: ICETransportPolicy, // `json:"iceTransportPolicy,omitempty"`

    /// bundle_policy indicates which media-bundling policy to use when gathering
    /// ICE candidates.
    bundle_policy: BundlePolicy, // `json:"bundlePolicy,omitempty"`

    /// rtcp_mux_policy indicates which rtcp-mux policy to use when gathering ICE
    /// candidates.
    rtcp_mux_policy: RTCPMuxPolicy, // `json:"rtcpMuxPolicy,omitempty"`

    /// peer_identity sets the target peer identity for the PeerConnection.
    /// The PeerConnection will not establish a connection to a remote peer
    /// unless it can be successfully authenticated with the provided name.
    peer_identity: String, //`json:"peerIdentity,omitempty"`

    /// Certificates describes a set of certificates that the PeerConnection
    /// uses to authenticate. Valid values for this parameter are created
    /// through calls to the GenerateCertificate function. Although any given
    /// DTLS connection will use only one certificate, this attribute allows the
    /// caller to provide multiple certificates that support different
    /// algorithms. The final certificate will be selected based on the DTLS
    /// handshake, which establishes which certificates are allowed. The
    /// PeerConnection implementation selects which of the certificates is
    /// used for a given connection; how certificates are selected is outside
    /// the scope of this specification. If this value is absent, then a default
    /// set of certificates is generated for each PeerConnection instance.
    certificates: Vec<Certificate>, //`json:"certificates,omitempty"`

    /// icecandidate_pool_size describes the size of the prefetched ICE pool.
    ice_candidate_pool_size: u8, // `json:"iceCandidatePoolSize,omitempty"`

    /// sdp_policy controls the type of SDP offers accepted by and
    /// SDP answers generated by the PeerConnection.
    sdp_policy: SdpPolicy, // `json:"sdpPolicy,omitempty"`
}
